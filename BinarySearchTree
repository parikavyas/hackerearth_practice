class BinarySearchTreeNode():
    def __init__(self, data):
        self.data = data
        self.right = None
        self.left = None
    
    def add_child(self, data):
        if(data == self.data):
            return 
        elif(data < self.data):
            if(self.left):
                self.left.add_child(data)
            else:
                self.left = BinarySearchTreeNode(data)
        elif(data > self.data):
            if(self.right):
                self.right.add_child(data)
            else:
                self.right = BinarySearchTreeNode(data)
    
    def inorder_traversal(self):
        elements= []
        if self.left : 
            elements += self.left.inorder_traversal()
        elements.append(self.data)
        if self.right : 
            elements += self.right.inorder_traversal()
        return elements
    
    def search(self, val):
        if self.data == val:
            return True
        if (self.data > val):
            if self.left : 
                return self.left.search(val)
            else:
                return False
        if(self.data < val):
            if self.right:
                return self.right.search(val)
            else:
                return False
            
def build_tree(elements):
    root = BinarySearchTreeNode(elements[0])
    for i in range(1,len(elements)):
        root.add_child(elements[i])
    return root
